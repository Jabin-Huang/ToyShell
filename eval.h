#pragma once

#define N_OPTR 17

typedef enum {
  L_P,
  NOT,
  MUL,
  DIV,
  MOD,
  ADD,
  SUB,
  GE,
  LE,
  GT,
  LT,
  EQ,
  NE,
  AND,
  OR,
  R_P,
  EOE
} Operator;

const char pri[N_OPTR][N_OPTR] = {//运算符优先等级 [栈顶] [当前]
            /*  (     !    *    /    %    +    -    >=    <=    >    <   ==   !=   &&   ||    )   \0 */
/* (  */       '<',  '<', '<', '<', '<', '<', '<',  '<',  '<', '<', '<', '<', '<', '<', '<', '=', ' ',
/* !  */       '<',  '<', '>', '>', '>', '>', '>',  '>',  '>', '>', '>', '>', '>', '>', '>', '>', '>', 
/* *  */       '<',  '<', '>', '>', '>', '>', '>',  '>',  '>', '>', '>', '>', '>', '>', '>', '>', '>',
/* /  */       '<',  '<', '>', '>', '>', '>', '>',  '>',  '>', '>', '>', '>', '>', '>', '>', '>', '>',
/* %  */       '<',  '<', '>', '>', '>', '>', '>',  '>',  '>', '>', '>', '>', '>', '>', '>', '>', '>',
/*  + */       '<',  '<', '<', '<', '<', '>', '>',  '>',  '>', '>', '>', '>', '>', '>', '>', '>', '>',
/* -  */       '<',  '<', '<', '<', '<', '>', '>',  '>',  '>', '>', '>', '>', '>', '>', '>', '>', '>',
/* >= */       '<',  '<', '<', '<', '<', '<', '<',  '>',  '>', '>', '>', '>', '>', '>', '>', '>', '>',
/* <= */       '<',  '<', '<', '<', '<', '<', '<',  '>',  '>', '>', '>', '>', '>', '>', '>', '>', '>',
/* >  */       '<',  '<', '<', '<', '<', '<', '<',  '>',  '>', '>', '>', '>', '>', '>', '>', '>', '>',
/* <  */       '<',  '<', '<', '<', '<', '<', '<',  '>',  '>', '>', '>', '>', '>', '>', '>', '>', '>',
/* == */       '<',  '<', '<', '<', '<', '<', '<',  '<',  '<', '<', '<', '>', '>', '>', '>', '>', '>',
/* != */       '<',  '<', '<', '<', '<', '<', '<',  '<',  '<', '<', '<', '>', '>', '>', '>', '>', '>',
/* && */       '<',  '<', '<', '<', '<', '<', '<',  '<',  '<', '<', '<', '<', '<', '>', '>', '>', '>',
/* || */       '<',  '<', '<', '<', '<', '<', '<',  '<',  '<', '<', '<', '<', '<', '>', '>', '>', '>',
/* )  */       ' ',  ' ', ' ', ' ', ' ', ' ', ' ',  ' ',  ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ',
/* \0 */       '<',  '<', '<', '<', '<', '<', '<',  '<',  '<', '<', '<', '<', '<', '<', '<', ' ', '=',
};

Operator optr2rank(char *op);

char orderBetween(char op1, char op2);

int arith_cal(char *);
int bool_cal(char*);
int readNumber(char *);